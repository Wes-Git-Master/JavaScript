*** Strings functions ***
              Name of method:
 - let 'str' .concat ---------> '!!!'      // ---> => hello okten => hello okten!!!
 - let 'str' .toUpperCase ----> ()         // ---> <= hello okten => HELLO OKTEN
 - let 'str' .toLowerCase ----> ()         // ---> => HELLO OKTEN => hello okten
 - let 'str' .startsWith -----> (hel...)   // ---> <= hello okten => true || false
 - let 'str' .endsWith -------> ('...ten') // ---> => hello okten => true || false
 - let 'str' .substring ------> (0,7)      // ---> <= hello okten => hello o
 - let 'str' .indexOf --------> ('o')      // ---> => hello okten => 4 - (index of string from left to right)
 - let 'str' .lastIndexOf ----> ('o')      // ---> <= hello okten => 6 - (index of string from right to left)
 - let 'str' .indexOf --------> ('o',5)    // ---> => hello okten => 6 - (index of string from left to right + position)
 - let 'str' .charAt ---------> (8)        // ---> <= hello okten => t
 - let 'str' .replace --------> ('e,'!')   // ---> => hello okten => h!llo okten - (replacing only the first entry)
 - let 'str' .replaceAll -----> ('e,'!')   // ---> <= hello okten => h!llo okten - (replacing All)
 - let 'str' .split ----------> (' ')      // ---> => hello okten => [hello okten] (distribution into array elements)

*** Array functions ***
              Name of method:
 - let [arr] .push ---------> ('new element')     // ---> => - adding a new element to the array
 - let [arr] .pop ----------> ()                  // ---> <= - cut element from array
 - let [arr] .unshift ------> ('new element')     // ---> => - adding a new element to the beginning of the array
 - let [arr] .shift --------> ()                  // ---> <= - removing an element from the beginning of the array
 - let [arr] .join ---------> (',')               // ---> => - connecting elements with each other with a symbol
 - let [arr] .concat -------> (arr2)              // ---> <= - connection of two arrays
 - let [arr] .revers -------> ()                  // ---> => - reverse array elements
 - let [arr] .slice --------> (0,4)               // ---> <= - cutting array elements by index
 - let [arr] .splice -------> (0,2,'!!!')         // ---> => - removing an element from a specific position
 - let [arr] .indexOf ------> (11)                // ---> <= - searching for the index of an element by the name of the element
 - let [arr] .includes -----> (11)                // ---> => - check for the presence of an element in the array

*** Array callback functions ***
              Name of method:
 - let [arr] . ----> ()                           // ---> <=
 - let [arr] . ----> ()                           // ---> =>
 - let [arr] . ----> ()                           // ---> <=






 *** // A string is both a primitive and a reference data type // ***